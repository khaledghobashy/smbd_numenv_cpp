
#pragma once

// Standard Library Includes.
#include <map>
#include <vector>

#include "eigen/Eigen/Sparse"

// uraeus library includes.
#include <uraeus/numerics/euler_parameters.hpp>
#include <uraeus/numerics/spatial_algebra.hpp>
#include <uraeus/solvers/helpers.hpp>

#include <uraeus/systems/configuration.hpp>

typedef std::map<std::string, std::string> Dict_SS;
typedef std::map<std::string, int> Dict_SI;

// Declaring the Topology Namespace.
// =================================

namespace $topology_name
{

// Declaring the Configuration Class and its numerical objects.
// ============================================================
class Configuration
{

public:
    Configuration();

public:
    ConfigurationAssembler ConfigInputs;
    void constructFromJSON(const std::string& fileName);                
    void set_inital_configuration();

private:
    void populateArguments();

public:
    Eigen::VectorXd q;
    Eigen::VectorXd qd;

    Eigen::Vector3d R_ground {0, 0, 0};
    Eigen::Vector4d P_ground {1, 0, 0, 0};

    Eigen::Vector3d Rd_ground {0, 0, 0};
    Eigen::Vector4d Pd_ground {0, 0, 0, 0};

    $primary_arguments

};

// ============================================================================
//                     Coordinates Struct Decleration
// ============================================================================
struct Coordinates
{
private:
    Coordinates() = delete;

public:
    Coordinates(Eigen::Ref<Eigen::VectorXd> _q, 
                Eigen::Ref<Eigen::VectorXd> _qd, 
                Eigen::Ref<Eigen::VectorXd> _qdd,
                Eigen::Ref<Eigen::VectorXd> _lgr);

public:
    Eigen::Ref<Eigen::VectorXd> q;
    Eigen::Ref<Eigen::VectorXd> qd;
    Eigen::Ref<Eigen::VectorXd> qdd;
    Eigen::Ref<Eigen::VectorXd> lgr;

// Topology Generalized Coordinates (R and P vectors).
public:    
    $coordinates

// Topology Generalized Velocities (dR/dt and dP/dt vectors).
public:
    $velocities

// Topology Generalized Accelerations (dR2/dt2 and dP2/dt2 vectors).
public:
    $accelerations

// Topology Lagrange Multipliers.
public:
    $lagrange

 };

// ============================================================================
//                     Constants Struct Decleration
// ============================================================================
struct Constants
{
public:

    void assemble(Configuration& config);

    $constants_symbols

};

// ============================================================================
//                     Actuators Struct Decleration
// ============================================================================
struct Actuators
{
    Actuators();

public:

    $actuators_symbols
    
};

// ============================================================================
//                 Position Equations Struct Decleration
// ============================================================================
struct Pos_Eq
{
    void eval(Eigen::Ref<Eigen::VectorXd> eq, Coordinates& coord, Constants& consts, Actuators& acts, double t);

    $pos_common_expressions
};

// ============================================================================
//                 Velocities Equations Struct Decleration
// ============================================================================
struct Vel_Eq
{
    void eval(Eigen::Ref<Eigen::VectorXd> eq, Coordinates& coord, Constants& consts, Actuators& acts, double t);

    $vel_common_expressions
};

// ============================================================================
//                 Accelerations Equations Struct Decleration
// ============================================================================
struct Acc_Eq
{
    void eval(Eigen::Ref<Eigen::VectorXd> eq, Coordinates& coord, Constants& consts, Actuators& acts, double t);

    $acc_common_expressions
};

// ============================================================================
//                 Forces Equations Struct Decleration
// ============================================================================
struct Frc_Eq
{
    void eval(Eigen::Ref<Eigen::VectorXd> eq, Coordinates& coord, Constants& consts, Actuators& acts, double t, Configuration& config);

    $frc_common_expressions
};

// ============================================================================
//                 Jacobian Equations Struct Decleration
// ============================================================================
struct JacMatEqn
{
    void assemble(Eigen::Ref<Eigen::VectorXi> rows, Eigen::Ref<Eigen::VectorXi> cols);
    void eval(std::vector<Eigen::MatrixXd>& matricies, Coordinates& coord, Constants& consts, Actuators& acts, double t);

    $jac_common_expressions
};

// ============================================================================
//                 Mass Matrix Equations Struct Decleration
// ============================================================================
struct MassMatEqn
{    
    void assemble(Eigen::Ref<Eigen::VectorXi> cols);
    void eval(std::vector<Eigen::MatrixXd>& matricies, Coordinates& coord, Constants& consts, Actuators& acts, double t, Configuration& config);

    $mas_common_expressions
};


// ============================================================================
//                     Topology Class Decleration
// ============================================================================

class Topology
{

public:
    // Topology constants.
    static const int n = $n;
    static const int nc = $nc;
    static const int nrows = $nve;
    static const int ncols = $ncols;

    const std::vector<std::string> bodies_names $bodies_names;
    const std::vector<std::string> joints_names $joints_names;

public:
    // Topology Constructors.

    // Deleting the default constructor to inforce initialization with the 
    // desired vectors
    Topology() = delete;

    Topology(std::string name, 
            Eigen::Ref<Eigen::VectorXd> q, 
            Eigen::Ref<Eigen::VectorXd> qd, 
            Eigen::Ref<Eigen::VectorXd> qdd,
            Eigen::Ref<Eigen::VectorXd> lgr);

public:

    // These variables are to be initialized through the class constructor 
    // initializer list
    std::string prefix;
    Coordinates coord;

    // These variables are initialized with their default constructor.
    double t = 0;

    Configuration config;
    Constants consts;
    Actuators acts;

    Pos_Eq pos_eq_obj;
    Vel_Eq vel_eq_obj;
    Acc_Eq acc_eq_obj;
    Frc_Eq frc_eq_obj;

    JacMatEqn jac_eq_obj;
    MassMatEqn mas_eq_obj;

    Eigen::VectorXd pos_eq;
    Eigen::VectorXd vel_eq;
    Eigen::VectorXd acc_eq;
    Eigen::VectorXd frc_eq;
    Eigen::VectorXd rct_eq;

    Eigen::VectorXi jac_rows;
    Eigen::VectorXi jac_cols;
    Eigen::VectorXi mas_cols = Eigen::VectorXi::LinSpaced(ncols, 0, ncols-1);

    std::vector<Eigen::MatrixXd> jac_eq;
    std::vector<Eigen::MatrixXd> mas_eq;

    Dict_SI indicies_map;

    void initialize();
    void set_mapping(Dict_SI& indicies_map, Dict_SS& interface_map);
    void map_indicies();
    void assemble(Dict_SI& indicies_map, Dict_SS& interface_map, int rows_offset);


    // Topology Equations Evaluators.
    void eval_pos_eq();
    void eval_vel_eq();
    void eval_acc_eq();
    void eval_frc_eq();
    void eval_jac_eq();
    void eval_mas_eq();
    void eval_reactions();
    void eval_reactions(Eigen::Ref<SparseBlock> jacobian);

// Topology Bodies Indicies from the network graph.                    
public:
    $bodies_indices

};

}; // end namespace
