#pragma once

// standard library includes
#include <numeric>

// uraeus library includes
#include <uraeus/solvers/solvers.hpp>

// local topologies includes
#include "$topology_name.hpp"

using namespace $topology_name;

// selecting solver type based on the system constraints condition,
// whether it is fully or under constrained model.
typedef std::conditional<
        Topology::n == Topology::nc, 
        kds::Solver<Topology>, 
        dds::Solver<Topology>>::type Solver;

// basic Simulation class exposing minimal API for usage by the user.
class Simulation
{

public:
    Simulation();

public:
    Solver Sim;

public:
    void Solve(double simTime, double steps);
    void ConstructConfiguration(std::string fileName);
    void SaveResults(std::string location, std::string name);

public:
    $user_functions

};
